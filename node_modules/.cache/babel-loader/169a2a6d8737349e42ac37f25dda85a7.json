{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/pranaw/Desktop/Codes/music-player/src/components/SearchResults/SearchBar.jsx\";\nimport React, { useState } from \"react\";\nimport IconButton from '@material-ui/core/IconButton';\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded';\nimport axios from \"axios\";\nimport { Credentials } from \"./../../Credentials\";\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchSearchResults = (updatedPageNo = '', query, mytoken) => {\n      const pageNumber = updatedPageNo ? `&page=${updatedPageNo}` : ''; // By default the limit of results is 20\n\n      const searchUrl = `https://api.spotify.com/v1/search?q=${query}&type=track`;\n\n      if (this.cancel) {\n        // Cancel the previous request before making a new request\n        this.cancel.cancel();\n      } // Create a new CancelToken\n\n\n      this.cancel = axios.CancelToken.source();\n      axios(searchUrl, {\n        method: 'GET',\n        headers: {\n          'Authorization': 'Bearer ' + mytoken\n        },\n        cancelToken: this.cancel.token\n      }).then(res => {\n        console.log(res);\n        const resultNotFoundMsg = !res.data.hits.length ? 'There are no more search results. Please try a new search.' : '';\n        this.setState({\n          results: res.data.items,\n          message: resultNotFoundMsg,\n          loading: false\n        });\n      }).catch(error => {\n        if (axios.isCancel(error) || error) {\n          this.setState({\n            loading: false,\n            message: 'Failed to fetch results.Please check network'\n          });\n        }\n      });\n    };\n\n    this.getToken = query => {\n      const spotify = Credentials();\n      console.log('RENDERING APP.JS');\n      axios('https://accounts.spotify.com/api/token', {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'Authorization': 'Basic ' + btoa(spotify.ClientId + ':' + spotify.ClientSecret)\n        },\n        data: 'grant_type=client_credentials',\n        method: 'POST'\n      }).then(tokenResponse => {\n        // console.log(tokenResponse)\n        let curr = tokenResponse.data.access_token;\n        console.log(curr);\n        this.fetchSearchResults(1, query, curr);\n        this.setState({\n          token: curr\n        });\n      });\n    };\n\n    this.handleOnInputChange = event => {\n      console.log(\"typed\");\n      const query = event.target.value;\n\n      if (!query) {\n        this.setState({\n          query,\n          results: {},\n          message: ''\n        });\n      } else {\n        this.setState({\n          query,\n          loading: true,\n          message: ''\n        }, () => {\n          this.getToken(query);\n        });\n      }\n    };\n\n    this.state = {\n      query: '',\n      results: {},\n      token: '',\n      loading: false,\n      message: ''\n    };\n    this.cancel = '';\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"d-flex align-items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"form-control d-inline\",\n          id: \"search-input\",\n          type: \"search\",\n          style: {\n            borderRadius: \"16px\"\n          },\n          placeholder: \"Search for song\",\n          \"aria-label\": \"Search\",\n          onChange: this.handleOnInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          type: \"submit\",\n          href: \"/search\",\n          children: /*#__PURE__*/_jsxDEV(SearchRoundedIcon, {\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default SearchBar;","map":{"version":3,"sources":["/home/pranaw/Desktop/Codes/music-player/src/components/SearchResults/SearchBar.jsx"],"names":["React","useState","IconButton","SearchRoundedIcon","axios","Credentials","SearchBar","Component","constructor","props","fetchSearchResults","updatedPageNo","query","mytoken","pageNumber","searchUrl","cancel","CancelToken","source","method","headers","cancelToken","token","then","res","console","log","resultNotFoundMsg","data","hits","length","setState","results","items","message","loading","catch","error","isCancel","getToken","spotify","btoa","ClientId","ClientSecret","tokenResponse","curr","access_token","handleOnInputChange","event","target","value","state","render","borderRadius"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport IconButton from '@material-ui/core/IconButton';\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded';\nimport axios from \"axios\";\nimport { Credentials } from \"./../../Credentials\";\n\nclass SearchBar extends React.Component {\n\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            query: '',\n            results: {},\n            token: '',\n            loading: false,\n            message: '',\n        };\n        this.cancel = '';\n    }\n\n\n    fetchSearchResults = (updatedPageNo = '', query, mytoken) => {\n        const pageNumber = updatedPageNo ? `&page=${updatedPageNo}` : '';\t// By default the limit of results is 20\n        const searchUrl = `https://api.spotify.com/v1/search?q=${query}&type=track`; if (this.cancel) {\n            // Cancel the previous request before making a new request\n            this.cancel.cancel();\n        }\n        // Create a new CancelToken\n        this.cancel = axios.CancelToken.source();\n        axios(searchUrl, {\n            method: 'GET',\n            headers: {\n                'Authorization': 'Bearer ' + mytoken,\n\n            },\n            cancelToken: this.cancel.token\n        })\n\n            .then((res) => {\n                console.log(res);\n                const resultNotFoundMsg = !res.data.hits.length\n                    ? 'There are no more search results. Please try a new search.'\n                    : ''; \n                    this.setState({\n                        results: res.data.items,\n                        message: resultNotFoundMsg,\n                        loading: false,\n                    });\n            })\n            .catch((error) => {\n                if (axios.isCancel(error) || error) {\n                    this.setState({\n                        loading: false,\n                        message: 'Failed to fetch results.Please check network',\n                    });\n                }\n            });\n    };\n\n    getToken = (query) => {\n        const spotify = Credentials();\n\n        console.log('RENDERING APP.JS');\n\n        axios('https://accounts.spotify.com/api/token', {\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Authorization': 'Basic ' + btoa(spotify.ClientId + ':' + spotify.ClientSecret)\n            },\n            data: 'grant_type=client_credentials',\n            method: 'POST'\n        })\n            .then(tokenResponse => {\n                // console.log(tokenResponse)\n                let curr = tokenResponse.data.access_token\n                console.log(curr)\n                this.fetchSearchResults(1, query, curr)\n                this.setState({ token: curr })\n            });\n    }\n\n    handleOnInputChange = (event) => {\n        console.log(\"typed\")\n        const query = event.target.value;\n        if (!query) {\n            this.setState({ query, results: {}, message: '' });\n        } else {\n            this.setState({ query, loading: true, message: '' }, () => {\n                this.getToken(query);\n            });\n        }\n    };\n\n    render() {\n        return (\n            <div>\n                <form className=\"d-flex align-items-center\">\n                    <input\n                        className=\"form-control d-inline\"\n                        id=\"search-input\"\n                        type=\"search\"\n                        style={{ borderRadius: \"16px\" }}\n                        placeholder=\"Search for song\"\n                        aria-label=\"Search\"\n                        onChange={this.handleOnInputChange}\n                    />\n                    <IconButton type=\"submit\" href=\"/search\">\n                        <SearchRoundedIcon color=\"primary\" />\n                    </IconButton>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default SearchBar;"]},"metadata":{},"sourceType":"module"}