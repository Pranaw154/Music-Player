{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/pranaw/Desktop/Codes/music-player/src/components/SearchResults/SearchBar.jsx\";\nimport React from \"react\";\nimport IconButton from '@material-ui/core/IconButton';\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded';\nimport axios from \"axios\";\nimport Credentials from \"./../../Credentials\";\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    var _s = $RefreshSig$();\n\n    super(props);\n\n    this.handleOnInputChange = event => {\n      const query = event.target.value;\n      this.setState({\n        query,\n        loading: true,\n        message: ''\n      });\n    };\n\n    this.fetchSearchResults = (updatedPageNo = '', query) => {\n      const pageNumber = updatedPageNo ? `&page=${updatedPageNo}` : ''; // By default the limit of results is 20\n\n      const searchUrl = `https://api.spotify.com/v1/search?q=${query}&type=track`;\n\n      if (this.cancel) {\n        // Cancel the previous request before making a new request\n        this.cancel.cancel();\n      } // Create a new CancelToken\n\n\n      this.cancel = axios.CancelToken.source();\n      axios.get(searchUrl, {\n        cancelToken: this.cancel.token\n      }).then(res => {\n        const resultNotFoundMsg = !res.data.hits.length ? 'There are no more search results. Please try a new search.' : '';\n        this.setState({\n          results: res.data.hits,\n          message: resultNotFoundMsg,\n          loading: false\n        });\n      }).catch(error => {\n        if (axios.isCancel(error) || error) {\n          this.setState({\n            loading: false,\n            message: 'Failed to fetch results.Please check network'\n          });\n        }\n      });\n    };\n\n    this.getToken = _s(() => {\n      _s();\n\n      const spotify = Credentials();\n      console.log('RENDERING APP.JS');\n      const [token, setToken] = useState('');\n      axios('https://accounts.spotify.com/api/token', {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'Authorization': 'Basic ' + btoa(spotify.ClientId + ':' + spotify.ClientSecret)\n        },\n        data: 'grant_type=client_credentials',\n        method: 'POST'\n      }).then(tokenResponse => {\n        // console.log(tokenResponse)\n        let curr = tokenResponse.data.access_token;\n        setToken(curr);\n      });\n    }, \"ASU5DC/3PNAtDu6g7HTvQX3bJZs=\");\n    this.state = {\n      query: '',\n      results: {},\n      loading: false,\n      message: ''\n    };\n    this.cancel = '';\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"d-flex align-items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"form-control d-inline\",\n          id: \"search-input\",\n          value: \"\",\n          type: \"search\",\n          style: {\n            borderRadius: \"16px\"\n          },\n          placeholder: \"Search for song\",\n          \"aria-label\": \"Search\",\n          onChange: this.handleOnInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          type: \"submit\",\n          href: \"/search\",\n          children: /*#__PURE__*/_jsxDEV(SearchRoundedIcon, {\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default SearchBar;","map":{"version":3,"sources":["/home/pranaw/Desktop/Codes/music-player/src/components/SearchResults/SearchBar.jsx"],"names":["React","IconButton","SearchRoundedIcon","axios","Credentials","SearchBar","Component","constructor","props","handleOnInputChange","event","query","target","value","setState","loading","message","fetchSearchResults","updatedPageNo","pageNumber","searchUrl","cancel","CancelToken","source","get","cancelToken","token","then","res","resultNotFoundMsg","data","hits","length","results","catch","error","isCancel","getToken","spotify","console","log","setToken","useState","headers","btoa","ClientId","ClientSecret","method","tokenResponse","curr","access_token","state","render","borderRadius"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport IconButton from '@material-ui/core/IconButton';\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded';\nimport axios from \"axios\";\nimport Credentials from \"./../../Credentials\"\n\nclass SearchBar extends React.Component {\n\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            query: '',\n            results: {},\n            loading: false,\n            message: '',\n        };\n        this.cancel = '';\n    }\n\n    handleOnInputChange = (event) => {\n        const query = event.target.value;\n        this.setState({ query, loading: true, message: '' });\n    };\n\n    fetchSearchResults = (updatedPageNo = '', query) => {\n        const pageNumber = updatedPageNo ? `&page=${updatedPageNo}` : '';\t// By default the limit of results is 20\n        const searchUrl = `https://api.spotify.com/v1/search?q=${query}&type=track`; if (this.cancel) {\n            // Cancel the previous request before making a new request\n            this.cancel.cancel();\n        }\n        // Create a new CancelToken\n        this.cancel = axios.CancelToken.source(); axios\n            .get(searchUrl, {\n                cancelToken: this.cancel.token,\n            })\n            .then((res) => {\n                const resultNotFoundMsg = !res.data.hits.length\n                    ? 'There are no more search results. Please try a new search.'\n                    : ''; this.setState({\n                        results: res.data.hits,\n                        message: resultNotFoundMsg,\n                        loading: false,\n                    });\n            })\n            .catch((error) => {\n                if (axios.isCancel(error) || error) {\n                    this.setState({\n                        loading: false,\n                        message: 'Failed to fetch results.Please check network',\n                    });\n                }\n            });\n    };\n\n    getToken = () => {\n        const spotify = Credentials();\n\n        console.log('RENDERING APP.JS');\n\n        const [token, setToken] = useState('');\n        axios('https://accounts.spotify.com/api/token', {\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Authorization': 'Basic ' + btoa(spotify.ClientId + ':' + spotify.ClientSecret)\n            },\n            data: 'grant_type=client_credentials',\n            method: 'POST'\n        })\n            .then(tokenResponse => {\n                // console.log(tokenResponse)\n                let curr = tokenResponse.data.access_token\n                setToken(curr);\n            });\n    }\n\n\n    render() {\n        return (\n            <div>\n                <form className=\"d-flex align-items-center\">\n                    <input\n                        className=\"form-control d-inline\"\n                        id=\"search-input\" value=\"\"\n                        type=\"search\"\n                        style={{ borderRadius: \"16px\" }}\n                        placeholder=\"Search for song\"\n                        aria-label=\"Search\"\n                        onChange={this.handleOnInputChange}\n                    />\n                    <IconButton type=\"submit\" href=\"/search\">\n                        <SearchRoundedIcon color=\"primary\" />\n                    </IconButton>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default SearchBar;"]},"metadata":{},"sourceType":"module"}