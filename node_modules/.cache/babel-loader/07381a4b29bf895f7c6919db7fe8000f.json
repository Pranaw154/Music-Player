{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/pranaw/Desktop/Codes/music-player/src/components/TopChart/TopChart.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport \"../../../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport CardGroupHeading from './../CardGroupHeading/CardGroupHeading';\nimport CardGroup from \"./../Card/CardGroup\";\nimport CheckCardgrp from \"../myBootstrap/CheckCardgrp\";\nimport { Credentials } from './../../Credentials';\nimport axios from \"axios\";\n\nfunction TopChart(props) {\n  _s();\n\n  const spotify = Credentials();\n  console.log('RENDERING APP.JS');\n  const [token, setToken] = useState('');\n  const [tracks, setTracks] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const GetPlaylist = async (currToken, playlistId) => {\n    await axios(`https://api.spotify.com/v1/playlists/${playlistId}/tracks `, {\n      method: 'GET',\n      headers: {\n        'Authorization': 'Bearer ' + currToken\n      }\n    }).then(tracksResponse => {\n      let tempArray = [];\n\n      for (let i = 0; i < 10; i++) {\n        tempArray = [...tempArray, {\n          index: tempArray.length,\n          artists: tracksResponse.data.items[i].track.artists[0].name,\n          spotifyLink: tracksResponse.data.items[i].track.external_urls.spotify,\n          trackId: tracksResponse.data.items[i].track.id,\n          imageUrl: tracksResponse.data.items[i].track.album.images[1].url,\n          trackName: tracksResponse.data.items[i].track.name,\n          trackPreviewUrl: tracksResponse.data.items[i].track.preview_url\n        }];\n      }\n\n      setTracks(tempArray);\n    });\n    setTimeout(() => {\n      setLoading(true);\n    }, 10000); // tracksResponse.data.items.length\n  };\n\n  const buttonClicked = async currToken => {\n    await axios(`https://api.spotify.com/v1/search?q=Global%20Top%2050&type=playlist`, {\n      method: 'GET',\n      headers: {\n        'Authorization': 'Bearer ' + currToken\n      }\n    }).then(tracksResponse => {\n      GetPlaylist(currToken, tracksResponse.data.playlists.items[0].id);\n    });\n  };\n\n  useEffect(() => {\n    axios('https://accounts.spotify.com/api/token', {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Authorization': 'Basic ' + btoa(spotify.ClientId + ':' + spotify.ClientSecret)\n      },\n      data: 'grant_type=client_credentials',\n      method: 'POST'\n    }).then(tokenResponse => {\n      // console.log(tokenResponse)\n      let curr = tokenResponse.data.access_token;\n      setToken(curr);\n      buttonClicked(curr);\n    });\n  }, [spotify.ClientId, spotify.ClientSecret]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: loading ? /*#__PURE__*/_jsxDEV(CheckCardgrp, {\n      playlist: tracks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 22\n    }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"WAITING\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 56\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TopChart, \"LET/wt8n2nJZe4ZhkO/AQpiwqxs=\");\n\n_c = TopChart;\nexport default TopChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"TopChart\");","map":{"version":3,"sources":["/home/pranaw/Desktop/Codes/music-player/src/components/TopChart/TopChart.jsx"],"names":["React","useState","useEffect","CardGroupHeading","CardGroup","CheckCardgrp","Credentials","axios","TopChart","props","spotify","console","log","token","setToken","tracks","setTracks","loading","setLoading","GetPlaylist","currToken","playlistId","method","headers","then","tracksResponse","tempArray","i","index","length","artists","data","items","track","name","spotifyLink","external_urls","trackId","id","imageUrl","album","images","url","trackName","trackPreviewUrl","preview_url","setTimeout","buttonClicked","playlists","btoa","ClientId","ClientSecret","tokenResponse","curr","access_token"],"mappings":"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","sourcesContent":["import React, { useState, useEffect }  from 'react';\nimport \"../../../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport CardGroupHeading from './../CardGroupHeading/CardGroupHeading';\nimport CardGroup from \"./../Card/CardGroup\";\nimport CheckCardgrp from \"../myBootstrap/CheckCardgrp\";\nimport { Credentials } from './../../Credentials';\nimport axios from \"axios\";\n\nfunction TopChart(props) {\n\n    const spotify = Credentials();\n\n    console.log('RENDERING APP.JS');\n\n    const [token, setToken] = useState('');\n    const [tracks, setTracks] = useState([]);\n    const [loading, setLoading] = useState(false);\n\n    const GetPlaylist = async (currToken, playlistId) => {\n\n\n        await axios(`https://api.spotify.com/v1/playlists/${playlistId}/tracks `, {\n            method: 'GET',\n            headers: {\n                'Authorization': 'Bearer ' + currToken\n            }\n        })\n            .then(tracksResponse => {\n                let tempArray = [];\n                for (let i = 0; i < 10; i++) {\n                    tempArray = [...tempArray, {\n                        index: tempArray.length,\n                        artists: tracksResponse.data.items[i].track.artists[0].name,\n                        spotifyLink: tracksResponse.data.items[i].track.external_urls.spotify,\n                        trackId: tracksResponse.data.items[i].track.id,\n                        imageUrl: tracksResponse.data.items[i].track.album.images[1].url,\n                        trackName: tracksResponse.data.items[i].track.name,\n                        trackPreviewUrl: tracksResponse.data.items[i].track.preview_url\n                    }]\n                }\n                setTracks(tempArray);\n            });\n            setTimeout(() => {\n                setLoading(true);\n            }, 10000);\n            // tracksResponse.data.items.length\n    }\n\n    const buttonClicked = async (currToken) => {\n\n        await axios(`https://api.spotify.com/v1/search?q=Global%20Top%2050&type=playlist`, {\n            method: 'GET',\n            headers: {\n                'Authorization': 'Bearer ' + currToken\n            }\n        })\n            .then(tracksResponse => {\n                GetPlaylist(currToken, tracksResponse.data.playlists.items[0].id)\n            })\n\n\n    }\n\n    useEffect(() => {\n\n        axios('https://accounts.spotify.com/api/token', {\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Authorization': 'Basic ' + btoa(spotify.ClientId + ':' + spotify.ClientSecret)\n            },\n            data: 'grant_type=client_credentials',\n            method: 'POST'\n        })\n            .then(tokenResponse => {\n                // console.log(tokenResponse)\n                let curr= tokenResponse.data.access_token\n                setToken(curr);\n                buttonClicked(curr);\n            });\n\n\n    }, [spotify.ClientId, spotify.ClientSecret]);\n\n    return(\n        <div>\n            {/* <CardGroupHeading\n                name=\"Top Charts\"\n            /> */}\n            {/* {loading?<CardGroup playlist={tracks}/>:<h1>WAITING</h1>} */}\n            {/* <CardGroup playlist={tracks}/> */}\n            {loading?<CheckCardgrp playlist={tracks}/>:<h1>WAITING</h1>}\n\n        </div>\n\n    );\n}\n\nexport default TopChart;"]},"metadata":{},"sourceType":"module"}